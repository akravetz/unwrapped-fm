import type { components } from '@/api/generated/types'

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://127.0.0.1:8443'

// Use autogenerated types
type PublicAnalysisResponse = components['schemas']['PublicAnalysisResponse']

class PublicApiError extends Error {
  constructor(
    message: string,
    public status: number,
    public response?: Record<string, unknown>
  ) {
    super(message)
    this.name = 'PublicApiError'
  }
}

export class PublicApiClient {
  private baseUrl: string

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const config: RequestInit = {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    }

    const response = await fetch(`${this.baseUrl}${endpoint}`, config)

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      throw new PublicApiError(
        errorData.detail || 'An error occurred',
        response.status,
        errorData
      )
    }

    return response.json()
  }

  // Public endpoints (no authentication required)
  async getSharedAnalysis(shareToken: string): Promise<PublicAnalysisResponse> {
    return this.request<PublicAnalysisResponse>(`/api/v1/public/share/${shareToken}`)
  }
}

export const publicApiClient = new PublicApiClient()
