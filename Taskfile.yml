version: '3'

vars:
  COMPOSE_PROJECT_NAME: unwrapped

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Database tasks
  db-up:
    desc: Start PostgreSQL database
    cmds:
      - docker compose up -d postgres
      - echo "Waiting for database to be ready..."
      - sleep 5

  db-down:
    desc: Stop PostgreSQL database
    cmds:
      - docker compose down

  db-logs:
    desc: Show database logs
    cmds:
      - docker compose logs -f postgres

  db-shell:
    desc: Connect to database shell
    cmds:
      - docker compose exec postgres pg_isready -U postgres -d unwrapped || sleep 10
      - docker compose exec postgres psql -U postgres -d unwrapped

  db-reset:
    desc: Reset database (drop and recreate)
    cmds:
      - docker compose down -v
      - docker compose up -d postgres
      - echo "Waiting for database to be ready..."
      - sleep 10

  # Atlas migration tasks
  db:migrate:diff:
    desc: Generate a new migration
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py diff {{.CLI_ARGS}}

  db:migrate:apply:
    desc: Apply pending migrations
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py apply

  db:migrate:status:
    desc: Show migration status
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py status

  db:migrate:validate:
    desc: Validate migration files
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py validate

  # Development tasks
  dev:
    desc: Start development environment
    deps: [db-up]
    cmds:
      - echo "Starting development environment..."
      - echo "Database at localhost:5432"
      - echo "PgAdmin at http://localhost:5050"

  dev:backend:
    desc: Start backend development server
    dir: backend
    deps: [db-up]
    cmds:
      - echo "Starting backend server..."
      - echo "API at https://127.0.0.1:8443"
      - echo "Docs at https://127.0.0.1:8443/docs"
      - echo "Health at https://127.0.0.1:8443/health"
      - echo ""
      - echo "Note - Must run from backend/ directory due to Python path configuration"
      - echo "Use - cd backend && uv run uvicorn src.unwrapped.main:app --reload"

  dev:frontend:
    desc: Start frontend development server
    dir: frontend
    cmds:
      - echo "Starting frontend server..."
      - npm run dev

  # Testing tasks
  test:
    desc: Run all tests
    dir: backend
    cmds:
      - uv run pytest

  test:watch:
    desc: Run tests in watch mode
    dir: backend
    cmds:
      - uv run pytest-watch

  test:coverage:
    desc: Run tests with coverage report
    dir: backend
    cmds:
      - uv run pytest --cov=src --cov-report=html --cov-report=term

  # Code quality tasks
  lint:
    desc: Run linting
    dir: backend
    cmds:
      - uv run ruff check .

  lint:fix:
    desc: Run linting with auto-fix
    dir: backend
    cmds:
      - uv run ruff check . --fix

  format:
    desc: Format code
    dir: backend
    cmds:
      - uv run ruff format .

  quality:
    desc: Run all code quality checks
    dir: backend
    cmds:
      - uv run ruff check . --fix
      - uv run ruff format .
      - uv run pytest

  install:
    desc: Install all dependencies
    cmds:
      - task: backend-install
      - task: frontend-install

  # pgAdmin
  pgadmin-up:
    desc: Start pgAdmin
    deps: [db-up]
    cmds:
      - docker compose up -d pgadmin
      - echo "pgAdmin available at http://localhost:5050"
      # - echo 'Email: admin@unwrapped.fm, Password: admin'

  # Backend tasks
  backend-install:
    desc: Install backend dependencies
    dir: backend
    cmds:
      - uv sync

  backend-start:
    desc: Start backend development server (HTTPS)
    dir: backend
    deps: [db-up]
    cmds:
      - uv run uvicorn src.unwrapped.main:app --reload --host 0.0.0.0 --port 8443 --ssl-keyfile certs/localhost.key --ssl-certfile certs/localhost.crt

  backend-test:
    desc: Run backend tests
    dir: backend
    cmds:
      - uv run pytest -v

  backend-lint:
    desc: Lint backend code
    dir: backend
    cmds:
      - uv run ruff check .
      - uv run ruff format . --check

  backend-format:
    desc: Format backend code
    dir: backend
    cmds:
      - uv run ruff format .
      - uv run ruff check . --fix

  # Frontend tasks
  frontend-install:
    desc: Install frontend dependencies
    dir: frontend
    cmds:
      - npm install

  frontend-start:
    desc: Start frontend development server
    dir: frontend
    cmds:
      - npm run dev

  frontend-build:
    desc: Build frontend for production
    dir: frontend
    cmds:
      - npm run build

  frontend-lint:
    desc: Lint frontend code
    dir: frontend
    cmds:
      - npm run lint

  # Quality assurance
  test-all:
    desc: Run all tests
    cmds:
      - task: backend-test

  lint-all:
    desc: Lint all code
    cmds:
      - task: backend-lint
      - task: frontend-lint

  format-all:
    desc: Format all code
    cmds:
      - task: backend-format

  # Cleanup
  clean:
    desc: Clean up development environment
    cmds:
      - docker compose down -v
      - docker system prune -f
