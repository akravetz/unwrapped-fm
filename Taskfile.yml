version: '3'

vars:
  COMPOSE_PROJECT_NAME: unwrapped

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # === Database Tasks ===
  db-up:
    desc: Start PostgreSQL database
    cmds:
      - docker compose up -d postgres
      - echo "Waiting for database to be ready..."
      - sleep 5

  db-down:
    desc: Stop PostgreSQL database
    cmds:
      - docker compose down

  db-shell:
    desc: Connect to database shell
    cmds:
      - docker compose exec postgres pg_isready -U postgres -d unwrapped || sleep 10
      - docker compose exec postgres psql -U postgres -d unwrapped

  db-reset:
    desc: Reset database (drop and recreate)
    cmds:
      - docker compose down -v
      - docker compose up -d postgres
      - echo "Waiting for database to be ready..."
      - sleep 10

  # === Atlas Migration Tasks ===
  db:migrate:diff:
    desc: Generate a new migration
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py diff {{.CLI_ARGS}}

  db:migrate:apply:
    desc: Apply pending migrations
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py apply

  db:migrate:status:
    desc: Show migration status
    dir: backend
    cmds:
      - uv run python scripts/atlas_migrate.py status

  # === Development Tasks ===
  install:
    desc: Install all dependencies
    cmds:
      - task: backend:install
      - task: frontend:install

  dev:backend:
    desc: Start backend development server
    dir: backend
    deps: [db-up]
    cmds:
      - echo "Starting backend server at https://127.0.0.1:8443"
      - echo "API docs at https://127.0.0.1:8443/docs"
      - uv run uvicorn src.unwrapped.main:app --reload --host 0.0.0.0 --port 8443 --ssl-keyfile certs/localhost.key --ssl-certfile certs/localhost.crt

  dev:frontend:
    desc: Start frontend development server
    dir: frontend
    cmds:
      - echo "Starting frontend server at http://localhost:3000"
      - npm run dev

  # === Backend Tasks ===
  backend:install:
    desc: Install backend dependencies
    dir: backend
    cmds:
      - uv sync

  backend:test:
    desc: Run backend tests with coverage
    dir: backend
    cmds:
      - uv run pytest --cov=src --cov-report=html --cov-report=term

  backend:lint:
    desc: Lint and format backend code
    dir: backend
    cmds:
      - uv run ruff check . --fix
      - uv run ruff format .

  # === Frontend Tasks ===
  frontend:install:
    desc: Install frontend dependencies
    dir: frontend
    cmds:
      - npm install

  frontend:test:
    desc: Run frontend unit tests
    dir: frontend
    cmds:
      - npm run test

  frontend:test:e2e:
    desc: Run frontend E2E tests
    dir: frontend
    cmds:
      - npm run test:e2e

  frontend:build:
    desc: Build frontend for production
    dir: frontend
    cmds:
      - npm run build

  frontend:lint:
    desc: Lint frontend code
    dir: frontend
    cmds:
      - npm run lint

  # === Combined Tasks ===
  test:all:
    desc: Run all tests (backend + frontend)
    cmds:
      - task: backend:test
      - task: frontend:test

  lint:all:
    desc: Lint all code (backend + frontend)
    cmds:
      - task: backend:lint
      - task: frontend:lint

  qa:
    desc: Quality assurance - lint and test everything
    cmds:
      - task: lint:all
      - task: test:all
      - task: frontend:build

  # === API Client Generation ===
  api:generate:
    desc: Generate OpenAPI spec and TypeScript client
    cmds:
      - task: api:spec
      - task: api:client

  api:spec:
    desc: Generate OpenAPI specification from FastAPI
    dir: backend
    cmds:
      - mkdir -p ../frontend/src/api
      - |
        uv run python -c "
        import json
        from src.unwrapped.main import app
        with open('../frontend/src/api/openapi.json', 'w') as f:
            json.dump(app.openapi(), f, indent=2)
        print('OpenAPI spec generated at frontend/src/api/openapi.json')
        "

  api:client:
    desc: Generate TypeScript API client from OpenAPI spec
    dir: frontend
    deps: [api:spec]
    cmds:
      - mkdir -p src/api/generated
      - npx openapi-typescript src/api/openapi.json -o src/api/generated/types.ts
      - echo "TypeScript types generated at frontend/src/api/generated/types.ts"

  # === Cleanup ===
  clean:
    desc: Clean up development environment
    cmds:
      - docker compose down -v
      - docker system prune -f
